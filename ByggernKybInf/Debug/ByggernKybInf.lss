
ByggernKybInf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800100  00000c7c  00000d10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001f6  008001f6  00000e06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a41  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000829  00000000  00000000  00001969  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d5  00000000  00000000  00002192  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00002668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000428  00000000  00000000  000027a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000269  00000000  00000000  00002bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002e39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e7       	ldi	r30, 0x7C	; 124
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 3f       	cpi	r26, 0xF6	; 246
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a6 ef       	ldi	r26, 0xF6	; 246
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 30       	cpi	r26, 0x00	; 0
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  a6:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <xmem_init>:
#include "avr/io.h"
#include "xmem.h"

void xmem_init(void) {
	// "External SRAM operation is enabled by setting the SRE bit in the MCUCR register"
	MCUCR |= (1 << SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	// Release P7-P4 from external memory (we want to use it for JTAG)
	SFIOR |= (1 << XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
  ba:	08 95       	ret

000000bc <sram_write>:
}

void sram_write(uint8_t data, uint16_t addr) {
	volatile char *ext_mem = (char*) SRAM_BASE_ADDRESS;
  bc:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <SRAM_BASE_ADDRESS>
  c0:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <SRAM_BASE_ADDRESS+0x1>
	ext_mem[addr] = data;
  c4:	e6 0f       	add	r30, r22
  c6:	f7 1f       	adc	r31, r23
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <UART_Transmit>:
#include <stdio.h>


void UART_Transmit(unsigned char data) {
	// wait for empty transmit buffer
	while (!(UCSR0A & (1<<UDRE0))) {}
  cc:	5d 9b       	sbis	0x0b, 5	; 11
  ce:	fe cf       	rjmp	.-4      	; 0xcc <UART_Transmit>
	
	// put data into buffer, sends the data
	UDR0 = data;
  d0:	8c b9       	out	0x0c, r24	; 12
  d2:	08 95       	ret

000000d4 <UART_Receive>:
}

unsigned char UART_Receive(void) {
	// wait for data to be received
	while (!(UCSR0A & (1<<RXC0))) {}
  d4:	5f 9b       	sbis	0x0b, 7	; 11
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <UART_Receive>
	
	// get and return received data from buffer
	return UDR0;
  d8:	8c b1       	in	r24, 0x0c	; 12
}
  da:	08 95       	ret

000000dc <UART_init>:

void UART_init(unsigned int ubrr) {
	// set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
  dc:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
  de:	89 b9       	out	0x09, r24	; 9
	
	// enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  e0:	88 e1       	ldi	r24, 0x18	; 24
  e2:	8a b9       	out	0x0a, r24	; 10
	
	// set frame format
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
  e4:	8e e8       	ldi	r24, 0x8E	; 142
  e6:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(UART_Transmit, UART_Receive);
  e8:	6a e6       	ldi	r22, 0x6A	; 106
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	86 e6       	ldi	r24, 0x66	; 102
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <fdevopen>
  f4:	08 95       	ret

000000f6 <SRAM_test>:
	
	SRAM_test();   
}

void SRAM_test(void)
{
  f6:	bf 92       	push	r11
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
 108:	8c e0       	ldi	r24, 0x0C	; 12
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	9f 93       	push	r25
 10e:	8f 93       	push	r24
 110:	0e 94 b7 01 	call	0x36e	; 0x36e <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
 114:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rand>
 118:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
 11a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
 126:	e1 2c       	mov	r14, r1
 128:	f1 2c       	mov	r15, r1
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 12a:	26 c0       	rjmp	.+76     	; 0x178 <SRAM_test+0x82>
		uint8_t some_value = rand();
 12c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rand>
 130:	b8 2e       	mov	r11, r24
 132:	8c 01       	movw	r16, r24
 134:	11 27       	eor	r17, r17
		sram_write(some_value, i);
 136:	be 01       	movw	r22, r28
 138:	c8 01       	movw	r24, r16
 13a:	0e 94 5e 00 	call	0xbc	; 0xbc <sram_write>
		uint8_t retreived_value = ext_ram[i];
 13e:	fe 01       	movw	r30, r28
 140:	f8 5e       	subi	r31, 0xE8	; 232
 142:	80 81       	ld	r24, Z
		if (retreived_value != some_value) {
 144:	b8 16       	cp	r11, r24
 146:	b9 f0       	breq	.+46     	; 0x176 <SRAM_test+0x80>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
 148:	1f 93       	push	r17
 14a:	0f 93       	push	r16
 14c:	1f 92       	push	r1
 14e:	8f 93       	push	r24
 150:	df 93       	push	r29
 152:	cf 93       	push	r28
 154:	84 e2       	ldi	r24, 0x24	; 36
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	9f 93       	push	r25
 15a:	8f 93       	push	r24
 15c:	0e 94 b7 01 	call	0x36e	; 0x36e <printf>
			write_errors++;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	e8 1a       	sub	r14, r24
 164:	f8 0a       	sbc	r15, r24
 166:	8d b7       	in	r24, 0x3d	; 61
 168:	9e b7       	in	r25, 0x3e	; 62
 16a:	08 96       	adiw	r24, 0x08	; 8
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	9e bf       	out	0x3e, r25	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	8d bf       	out	0x3d, r24	; 61
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 176:	21 96       	adiw	r28, 0x01	; 1
 178:	c1 15       	cp	r28, r1
 17a:	98 e0       	ldi	r25, 0x08	; 8
 17c:	d9 07       	cpc	r29, r25
 17e:	b0 f2       	brcs	.-84     	; 0x12c <SRAM_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
 180:	c6 01       	movw	r24, r12
 182:	0e 94 61 01 	call	0x2c2	; 0x2c2 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 186:	c0 e0       	ldi	r28, 0x00	; 0
 188:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 18e:	1f c0       	rjmp	.+62     	; 0x1ce <SRAM_test+0xd8>
		uint8_t some_value = rand();
 190:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rand>
		uint8_t retreived_value = ext_ram[i];
 194:	fe 01       	movw	r30, r28
 196:	f8 5e       	subi	r31, 0xE8	; 232
 198:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
 19a:	28 17       	cp	r18, r24
 19c:	b9 f0       	breq	.+46     	; 0x1cc <SRAM_test+0xd6>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
 19e:	99 27       	eor	r25, r25
 1a0:	9f 93       	push	r25
 1a2:	8f 93       	push	r24
 1a4:	1f 92       	push	r1
 1a6:	2f 93       	push	r18
 1a8:	df 93       	push	r29
 1aa:	cf 93       	push	r28
 1ac:	8e e5       	ldi	r24, 0x5E	; 94
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	9f 93       	push	r25
 1b2:	8f 93       	push	r24
 1b4:	0e 94 b7 01 	call	0x36e	; 0x36e <printf>
			retrieval_errors++;
 1b8:	0f 5f       	subi	r16, 0xFF	; 255
 1ba:	1f 4f       	sbci	r17, 0xFF	; 255
 1bc:	8d b7       	in	r24, 0x3d	; 61
 1be:	9e b7       	in	r25, 0x3e	; 62
 1c0:	08 96       	adiw	r24, 0x08	; 8
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	9e bf       	out	0x3e, r25	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 1cc:	21 96       	adiw	r28, 0x01	; 1
 1ce:	c1 15       	cp	r28, r1
 1d0:	98 e0       	ldi	r25, 0x08	; 8
 1d2:	d9 07       	cpc	r29, r25
 1d4:	e8 f2       	brcs	.-70     	; 0x190 <SRAM_test+0x9a>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\n\n\r", write_errors, retrieval_errors);
 1d6:	1f 93       	push	r17
 1d8:	0f 93       	push	r16
 1da:	ff 92       	push	r15
 1dc:	ef 92       	push	r14
 1de:	8c e9       	ldi	r24, 0x9C	; 156
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	9f 93       	push	r25
 1e4:	8f 93       	push	r24
 1e6:	0e 94 b7 01 	call	0x36e	; 0x36e <printf>
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	ff 90       	pop	r15
 200:	ef 90       	pop	r14
 202:	df 90       	pop	r13
 204:	cf 90       	pop	r12
 206:	bf 90       	pop	r11
 208:	08 95       	ret

0000020a <main>:
#include <stdio.h>
#include <stdlib.h>


int main(void) {
	UART_init(COMPUTED_UBRR);
 20a:	8f e1       	ldi	r24, 0x1F	; 31
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 6e 00 	call	0xdc	; 0xdc <UART_init>

	xmem_init();
 212:	0e 94 57 00 	call	0xae	; 0xae <xmem_init>
	
	SRAM_test();   
 216:	0e 94 7b 00 	call	0xf6	; 0xf6 <SRAM_test>
}
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	08 95       	ret

00000220 <do_rand>:
 220:	8f 92       	push	r8
 222:	9f 92       	push	r9
 224:	af 92       	push	r10
 226:	bf 92       	push	r11
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
 236:	68 81       	ld	r22, Y
 238:	79 81       	ldd	r23, Y+1	; 0x01
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	9b 81       	ldd	r25, Y+3	; 0x03
 23e:	61 15       	cp	r22, r1
 240:	71 05       	cpc	r23, r1
 242:	81 05       	cpc	r24, r1
 244:	91 05       	cpc	r25, r1
 246:	21 f4       	brne	.+8      	; 0x250 <do_rand+0x30>
 248:	64 e2       	ldi	r22, 0x24	; 36
 24a:	79 ed       	ldi	r23, 0xD9	; 217
 24c:	8b e5       	ldi	r24, 0x5B	; 91
 24e:	97 e0       	ldi	r25, 0x07	; 7
 250:	2d e1       	ldi	r18, 0x1D	; 29
 252:	33 ef       	ldi	r19, 0xF3	; 243
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	0e 94 a2 05 	call	0xb44	; 0xb44 <__divmodsi4>
 25c:	49 01       	movw	r8, r18
 25e:	5a 01       	movw	r10, r20
 260:	9b 01       	movw	r18, r22
 262:	ac 01       	movw	r20, r24
 264:	a7 ea       	ldi	r26, 0xA7	; 167
 266:	b1 e4       	ldi	r27, 0x41	; 65
 268:	0e 94 c1 05 	call	0xb82	; 0xb82 <__muluhisi3>
 26c:	6b 01       	movw	r12, r22
 26e:	7c 01       	movw	r14, r24
 270:	ac ee       	ldi	r26, 0xEC	; 236
 272:	b4 ef       	ldi	r27, 0xF4	; 244
 274:	a5 01       	movw	r20, r10
 276:	94 01       	movw	r18, r8
 278:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__mulohisi3>
 27c:	dc 01       	movw	r26, r24
 27e:	cb 01       	movw	r24, r22
 280:	8c 0d       	add	r24, r12
 282:	9d 1d       	adc	r25, r13
 284:	ae 1d       	adc	r26, r14
 286:	bf 1d       	adc	r27, r15
 288:	b7 ff       	sbrs	r27, 7
 28a:	03 c0       	rjmp	.+6      	; 0x292 <do_rand+0x72>
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	a1 09       	sbc	r26, r1
 290:	b0 48       	sbci	r27, 0x80	; 128
 292:	88 83       	st	Y, r24
 294:	99 83       	std	Y+1, r25	; 0x01
 296:	aa 83       	std	Y+2, r26	; 0x02
 298:	bb 83       	std	Y+3, r27	; 0x03
 29a:	9f 77       	andi	r25, 0x7F	; 127
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	bf 90       	pop	r11
 2aa:	af 90       	pop	r10
 2ac:	9f 90       	pop	r9
 2ae:	8f 90       	pop	r8
 2b0:	08 95       	ret

000002b2 <rand_r>:
 2b2:	0e 94 10 01 	call	0x220	; 0x220 <do_rand>
 2b6:	08 95       	ret

000002b8 <rand>:
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 10 01 	call	0x220	; 0x220 <do_rand>
 2c0:	08 95       	ret

000002c2 <srand>:
 2c2:	a0 e0       	ldi	r26, 0x00	; 0
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ce:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2d2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2d6:	08 95       	ret

000002d8 <fdevopen>:
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	00 97       	sbiw	r24, 0x00	; 0
 2e2:	31 f4       	brne	.+12     	; 0x2f0 <fdevopen+0x18>
 2e4:	61 15       	cp	r22, r1
 2e6:	71 05       	cpc	r23, r1
 2e8:	19 f4       	brne	.+6      	; 0x2f0 <fdevopen+0x18>
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	3a c0       	rjmp	.+116    	; 0x364 <fdevopen+0x8c>
 2f0:	8b 01       	movw	r16, r22
 2f2:	ec 01       	movw	r28, r24
 2f4:	6e e0       	ldi	r22, 0x0E	; 14
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 ae 03 	call	0x75c	; 0x75c <calloc>
 300:	fc 01       	movw	r30, r24
 302:	89 2b       	or	r24, r25
 304:	91 f3       	breq	.-28     	; 0x2ea <fdevopen+0x12>
 306:	80 e8       	ldi	r24, 0x80	; 128
 308:	83 83       	std	Z+3, r24	; 0x03
 30a:	01 15       	cp	r16, r1
 30c:	11 05       	cpc	r17, r1
 30e:	71 f0       	breq	.+28     	; 0x32c <fdevopen+0x54>
 310:	13 87       	std	Z+11, r17	; 0x0b
 312:	02 87       	std	Z+10, r16	; 0x0a
 314:	81 e8       	ldi	r24, 0x81	; 129
 316:	83 83       	std	Z+3, r24	; 0x03
 318:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__data_end>
 31c:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <__data_end+0x1>
 320:	89 2b       	or	r24, r25
 322:	21 f4       	brne	.+8      	; 0x32c <fdevopen+0x54>
 324:	f0 93 f7 01 	sts	0x01F7, r31	; 0x8001f7 <__data_end+0x1>
 328:	e0 93 f6 01 	sts	0x01F6, r30	; 0x8001f6 <__data_end>
 32c:	20 97       	sbiw	r28, 0x00	; 0
 32e:	c9 f0       	breq	.+50     	; 0x362 <fdevopen+0x8a>
 330:	d1 87       	std	Z+9, r29	; 0x09
 332:	c0 87       	std	Z+8, r28	; 0x08
 334:	83 81       	ldd	r24, Z+3	; 0x03
 336:	82 60       	ori	r24, 0x02	; 2
 338:	83 83       	std	Z+3, r24	; 0x03
 33a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <__data_end+0x2>
 33e:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <__data_end+0x3>
 342:	89 2b       	or	r24, r25
 344:	71 f4       	brne	.+28     	; 0x362 <fdevopen+0x8a>
 346:	f0 93 f9 01 	sts	0x01F9, r31	; 0x8001f9 <__data_end+0x3>
 34a:	e0 93 f8 01 	sts	0x01F8, r30	; 0x8001f8 <__data_end+0x2>
 34e:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <__data_end+0x4>
 352:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <__data_end+0x5>
 356:	89 2b       	or	r24, r25
 358:	21 f4       	brne	.+8      	; 0x362 <fdevopen+0x8a>
 35a:	f0 93 fb 01 	sts	0x01FB, r31	; 0x8001fb <__data_end+0x5>
 35e:	e0 93 fa 01 	sts	0x01FA, r30	; 0x8001fa <__data_end+0x4>
 362:	cf 01       	movw	r24, r30
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	08 95       	ret

0000036e <printf>:
 36e:	a0 e0       	ldi	r26, 0x00	; 0
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	ed eb       	ldi	r30, 0xBD	; 189
 374:	f1 e0       	ldi	r31, 0x01	; 1
 376:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__prologue_saves__+0x20>
 37a:	ae 01       	movw	r20, r28
 37c:	4b 5f       	subi	r20, 0xFB	; 251
 37e:	5f 4f       	sbci	r21, 0xFF	; 255
 380:	fa 01       	movw	r30, r20
 382:	61 91       	ld	r22, Z+
 384:	71 91       	ld	r23, Z+
 386:	af 01       	movw	r20, r30
 388:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <__data_end+0x2>
 38c:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <__data_end+0x3>
 390:	0e 94 cd 01 	call	0x39a	; 0x39a <vfprintf>
 394:	e2 e0       	ldi	r30, 0x02	; 2
 396:	0c 94 00 06 	jmp	0xc00	; 0xc00 <__epilogue_restores__+0x20>

0000039a <vfprintf>:
 39a:	ab e0       	ldi	r26, 0x0B	; 11
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	e3 ed       	ldi	r30, 0xD3	; 211
 3a0:	f1 e0       	ldi	r31, 0x01	; 1
 3a2:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__prologue_saves__>
 3a6:	6c 01       	movw	r12, r24
 3a8:	7b 01       	movw	r14, r22
 3aa:	8a 01       	movw	r16, r20
 3ac:	fc 01       	movw	r30, r24
 3ae:	17 82       	std	Z+7, r1	; 0x07
 3b0:	16 82       	std	Z+6, r1	; 0x06
 3b2:	83 81       	ldd	r24, Z+3	; 0x03
 3b4:	81 ff       	sbrs	r24, 1
 3b6:	cc c1       	rjmp	.+920    	; 0x750 <__stack+0x251>
 3b8:	ce 01       	movw	r24, r28
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	3c 01       	movw	r6, r24
 3be:	f6 01       	movw	r30, r12
 3c0:	93 81       	ldd	r25, Z+3	; 0x03
 3c2:	f7 01       	movw	r30, r14
 3c4:	93 fd       	sbrc	r25, 3
 3c6:	85 91       	lpm	r24, Z+
 3c8:	93 ff       	sbrs	r25, 3
 3ca:	81 91       	ld	r24, Z+
 3cc:	7f 01       	movw	r14, r30
 3ce:	88 23       	and	r24, r24
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <vfprintf+0x3a>
 3d2:	ba c1       	rjmp	.+884    	; 0x748 <__stack+0x249>
 3d4:	85 32       	cpi	r24, 0x25	; 37
 3d6:	39 f4       	brne	.+14     	; 0x3e6 <vfprintf+0x4c>
 3d8:	93 fd       	sbrc	r25, 3
 3da:	85 91       	lpm	r24, Z+
 3dc:	93 ff       	sbrs	r25, 3
 3de:	81 91       	ld	r24, Z+
 3e0:	7f 01       	movw	r14, r30
 3e2:	85 32       	cpi	r24, 0x25	; 37
 3e4:	29 f4       	brne	.+10     	; 0x3f0 <vfprintf+0x56>
 3e6:	b6 01       	movw	r22, r12
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 08 05 	call	0xa10	; 0xa10 <fputc>
 3ee:	e7 cf       	rjmp	.-50     	; 0x3be <vfprintf+0x24>
 3f0:	91 2c       	mov	r9, r1
 3f2:	21 2c       	mov	r2, r1
 3f4:	31 2c       	mov	r3, r1
 3f6:	ff e1       	ldi	r31, 0x1F	; 31
 3f8:	f3 15       	cp	r31, r3
 3fa:	d8 f0       	brcs	.+54     	; 0x432 <__DATA_REGION_LENGTH__+0x32>
 3fc:	8b 32       	cpi	r24, 0x2B	; 43
 3fe:	79 f0       	breq	.+30     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 400:	38 f4       	brcc	.+14     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 402:	80 32       	cpi	r24, 0x20	; 32
 404:	79 f0       	breq	.+30     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 406:	83 32       	cpi	r24, 0x23	; 35
 408:	a1 f4       	brne	.+40     	; 0x432 <__DATA_REGION_LENGTH__+0x32>
 40a:	23 2d       	mov	r18, r3
 40c:	20 61       	ori	r18, 0x10	; 16
 40e:	1d c0       	rjmp	.+58     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 410:	8d 32       	cpi	r24, 0x2D	; 45
 412:	61 f0       	breq	.+24     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 414:	80 33       	cpi	r24, 0x30	; 48
 416:	69 f4       	brne	.+26     	; 0x432 <__DATA_REGION_LENGTH__+0x32>
 418:	23 2d       	mov	r18, r3
 41a:	21 60       	ori	r18, 0x01	; 1
 41c:	16 c0       	rjmp	.+44     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 41e:	83 2d       	mov	r24, r3
 420:	82 60       	ori	r24, 0x02	; 2
 422:	38 2e       	mov	r3, r24
 424:	e3 2d       	mov	r30, r3
 426:	e4 60       	ori	r30, 0x04	; 4
 428:	3e 2e       	mov	r3, r30
 42a:	2a c0       	rjmp	.+84     	; 0x480 <__DATA_REGION_LENGTH__+0x80>
 42c:	f3 2d       	mov	r31, r3
 42e:	f8 60       	ori	r31, 0x08	; 8
 430:	1d c0       	rjmp	.+58     	; 0x46c <__DATA_REGION_LENGTH__+0x6c>
 432:	37 fc       	sbrc	r3, 7
 434:	2d c0       	rjmp	.+90     	; 0x490 <__DATA_REGION_LENGTH__+0x90>
 436:	20 ed       	ldi	r18, 0xD0	; 208
 438:	28 0f       	add	r18, r24
 43a:	2a 30       	cpi	r18, 0x0A	; 10
 43c:	40 f0       	brcs	.+16     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 43e:	8e 32       	cpi	r24, 0x2E	; 46
 440:	b9 f4       	brne	.+46     	; 0x470 <__DATA_REGION_LENGTH__+0x70>
 442:	36 fc       	sbrc	r3, 6
 444:	81 c1       	rjmp	.+770    	; 0x748 <__stack+0x249>
 446:	23 2d       	mov	r18, r3
 448:	20 64       	ori	r18, 0x40	; 64
 44a:	32 2e       	mov	r3, r18
 44c:	19 c0       	rjmp	.+50     	; 0x480 <__DATA_REGION_LENGTH__+0x80>
 44e:	36 fe       	sbrs	r3, 6
 450:	06 c0       	rjmp	.+12     	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
 452:	8a e0       	ldi	r24, 0x0A	; 10
 454:	98 9e       	mul	r9, r24
 456:	20 0d       	add	r18, r0
 458:	11 24       	eor	r1, r1
 45a:	92 2e       	mov	r9, r18
 45c:	11 c0       	rjmp	.+34     	; 0x480 <__DATA_REGION_LENGTH__+0x80>
 45e:	ea e0       	ldi	r30, 0x0A	; 10
 460:	2e 9e       	mul	r2, r30
 462:	20 0d       	add	r18, r0
 464:	11 24       	eor	r1, r1
 466:	22 2e       	mov	r2, r18
 468:	f3 2d       	mov	r31, r3
 46a:	f0 62       	ori	r31, 0x20	; 32
 46c:	3f 2e       	mov	r3, r31
 46e:	08 c0       	rjmp	.+16     	; 0x480 <__DATA_REGION_LENGTH__+0x80>
 470:	8c 36       	cpi	r24, 0x6C	; 108
 472:	21 f4       	brne	.+8      	; 0x47c <__DATA_REGION_LENGTH__+0x7c>
 474:	83 2d       	mov	r24, r3
 476:	80 68       	ori	r24, 0x80	; 128
 478:	38 2e       	mov	r3, r24
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__DATA_REGION_LENGTH__+0x80>
 47c:	88 36       	cpi	r24, 0x68	; 104
 47e:	41 f4       	brne	.+16     	; 0x490 <__DATA_REGION_LENGTH__+0x90>
 480:	f7 01       	movw	r30, r14
 482:	93 fd       	sbrc	r25, 3
 484:	85 91       	lpm	r24, Z+
 486:	93 ff       	sbrs	r25, 3
 488:	81 91       	ld	r24, Z+
 48a:	7f 01       	movw	r14, r30
 48c:	81 11       	cpse	r24, r1
 48e:	b3 cf       	rjmp	.-154    	; 0x3f6 <vfprintf+0x5c>
 490:	98 2f       	mov	r25, r24
 492:	9f 7d       	andi	r25, 0xDF	; 223
 494:	95 54       	subi	r25, 0x45	; 69
 496:	93 30       	cpi	r25, 0x03	; 3
 498:	28 f4       	brcc	.+10     	; 0x4a4 <__DATA_REGION_LENGTH__+0xa4>
 49a:	0c 5f       	subi	r16, 0xFC	; 252
 49c:	1f 4f       	sbci	r17, 0xFF	; 255
 49e:	9f e3       	ldi	r25, 0x3F	; 63
 4a0:	99 83       	std	Y+1, r25	; 0x01
 4a2:	0d c0       	rjmp	.+26     	; 0x4be <__DATA_REGION_LENGTH__+0xbe>
 4a4:	83 36       	cpi	r24, 0x63	; 99
 4a6:	31 f0       	breq	.+12     	; 0x4b4 <__DATA_REGION_LENGTH__+0xb4>
 4a8:	83 37       	cpi	r24, 0x73	; 115
 4aa:	71 f0       	breq	.+28     	; 0x4c8 <__DATA_REGION_LENGTH__+0xc8>
 4ac:	83 35       	cpi	r24, 0x53	; 83
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <__DATA_REGION_LENGTH__+0xb2>
 4b0:	59 c0       	rjmp	.+178    	; 0x564 <__stack+0x65>
 4b2:	21 c0       	rjmp	.+66     	; 0x4f6 <__DATA_REGION_LENGTH__+0xf6>
 4b4:	f8 01       	movw	r30, r16
 4b6:	80 81       	ld	r24, Z
 4b8:	89 83       	std	Y+1, r24	; 0x01
 4ba:	0e 5f       	subi	r16, 0xFE	; 254
 4bc:	1f 4f       	sbci	r17, 0xFF	; 255
 4be:	88 24       	eor	r8, r8
 4c0:	83 94       	inc	r8
 4c2:	91 2c       	mov	r9, r1
 4c4:	53 01       	movw	r10, r6
 4c6:	13 c0       	rjmp	.+38     	; 0x4ee <__DATA_REGION_LENGTH__+0xee>
 4c8:	28 01       	movw	r4, r16
 4ca:	f2 e0       	ldi	r31, 0x02	; 2
 4cc:	4f 0e       	add	r4, r31
 4ce:	51 1c       	adc	r5, r1
 4d0:	f8 01       	movw	r30, r16
 4d2:	a0 80       	ld	r10, Z
 4d4:	b1 80       	ldd	r11, Z+1	; 0x01
 4d6:	36 fe       	sbrs	r3, 6
 4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <__DATA_REGION_LENGTH__+0xe0>
 4da:	69 2d       	mov	r22, r9
 4dc:	70 e0       	ldi	r23, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__DATA_REGION_LENGTH__+0xe4>
 4e0:	6f ef       	ldi	r22, 0xFF	; 255
 4e2:	7f ef       	ldi	r23, 0xFF	; 255
 4e4:	c5 01       	movw	r24, r10
 4e6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <strnlen>
 4ea:	4c 01       	movw	r8, r24
 4ec:	82 01       	movw	r16, r4
 4ee:	f3 2d       	mov	r31, r3
 4f0:	ff 77       	andi	r31, 0x7F	; 127
 4f2:	3f 2e       	mov	r3, r31
 4f4:	16 c0       	rjmp	.+44     	; 0x522 <__stack+0x23>
 4f6:	28 01       	movw	r4, r16
 4f8:	22 e0       	ldi	r18, 0x02	; 2
 4fa:	42 0e       	add	r4, r18
 4fc:	51 1c       	adc	r5, r1
 4fe:	f8 01       	movw	r30, r16
 500:	a0 80       	ld	r10, Z
 502:	b1 80       	ldd	r11, Z+1	; 0x01
 504:	36 fe       	sbrs	r3, 6
 506:	03 c0       	rjmp	.+6      	; 0x50e <__stack+0xf>
 508:	69 2d       	mov	r22, r9
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <__stack+0x13>
 50e:	6f ef       	ldi	r22, 0xFF	; 255
 510:	7f ef       	ldi	r23, 0xFF	; 255
 512:	c5 01       	movw	r24, r10
 514:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <strnlen_P>
 518:	4c 01       	movw	r8, r24
 51a:	f3 2d       	mov	r31, r3
 51c:	f0 68       	ori	r31, 0x80	; 128
 51e:	3f 2e       	mov	r3, r31
 520:	82 01       	movw	r16, r4
 522:	33 fc       	sbrc	r3, 3
 524:	1b c0       	rjmp	.+54     	; 0x55c <__stack+0x5d>
 526:	82 2d       	mov	r24, r2
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	88 16       	cp	r8, r24
 52c:	99 06       	cpc	r9, r25
 52e:	b0 f4       	brcc	.+44     	; 0x55c <__stack+0x5d>
 530:	b6 01       	movw	r22, r12
 532:	80 e2       	ldi	r24, 0x20	; 32
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 08 05 	call	0xa10	; 0xa10 <fputc>
 53a:	2a 94       	dec	r2
 53c:	f4 cf       	rjmp	.-24     	; 0x526 <__stack+0x27>
 53e:	f5 01       	movw	r30, r10
 540:	37 fc       	sbrc	r3, 7
 542:	85 91       	lpm	r24, Z+
 544:	37 fe       	sbrs	r3, 7
 546:	81 91       	ld	r24, Z+
 548:	5f 01       	movw	r10, r30
 54a:	b6 01       	movw	r22, r12
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 08 05 	call	0xa10	; 0xa10 <fputc>
 552:	21 10       	cpse	r2, r1
 554:	2a 94       	dec	r2
 556:	21 e0       	ldi	r18, 0x01	; 1
 558:	82 1a       	sub	r8, r18
 55a:	91 08       	sbc	r9, r1
 55c:	81 14       	cp	r8, r1
 55e:	91 04       	cpc	r9, r1
 560:	71 f7       	brne	.-36     	; 0x53e <__stack+0x3f>
 562:	e8 c0       	rjmp	.+464    	; 0x734 <__stack+0x235>
 564:	84 36       	cpi	r24, 0x64	; 100
 566:	11 f0       	breq	.+4      	; 0x56c <__stack+0x6d>
 568:	89 36       	cpi	r24, 0x69	; 105
 56a:	41 f5       	brne	.+80     	; 0x5bc <__stack+0xbd>
 56c:	f8 01       	movw	r30, r16
 56e:	37 fe       	sbrs	r3, 7
 570:	07 c0       	rjmp	.+14     	; 0x580 <__stack+0x81>
 572:	60 81       	ld	r22, Z
 574:	71 81       	ldd	r23, Z+1	; 0x01
 576:	82 81       	ldd	r24, Z+2	; 0x02
 578:	93 81       	ldd	r25, Z+3	; 0x03
 57a:	0c 5f       	subi	r16, 0xFC	; 252
 57c:	1f 4f       	sbci	r17, 0xFF	; 255
 57e:	08 c0       	rjmp	.+16     	; 0x590 <__stack+0x91>
 580:	60 81       	ld	r22, Z
 582:	71 81       	ldd	r23, Z+1	; 0x01
 584:	07 2e       	mov	r0, r23
 586:	00 0c       	add	r0, r0
 588:	88 0b       	sbc	r24, r24
 58a:	99 0b       	sbc	r25, r25
 58c:	0e 5f       	subi	r16, 0xFE	; 254
 58e:	1f 4f       	sbci	r17, 0xFF	; 255
 590:	f3 2d       	mov	r31, r3
 592:	ff 76       	andi	r31, 0x6F	; 111
 594:	3f 2e       	mov	r3, r31
 596:	97 ff       	sbrs	r25, 7
 598:	09 c0       	rjmp	.+18     	; 0x5ac <__stack+0xad>
 59a:	90 95       	com	r25
 59c:	80 95       	com	r24
 59e:	70 95       	com	r23
 5a0:	61 95       	neg	r22
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255
 5a4:	8f 4f       	sbci	r24, 0xFF	; 255
 5a6:	9f 4f       	sbci	r25, 0xFF	; 255
 5a8:	f0 68       	ori	r31, 0x80	; 128
 5aa:	3f 2e       	mov	r3, r31
 5ac:	2a e0       	ldi	r18, 0x0A	; 10
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	a3 01       	movw	r20, r6
 5b2:	0e 94 44 05 	call	0xa88	; 0xa88 <__ultoa_invert>
 5b6:	88 2e       	mov	r8, r24
 5b8:	86 18       	sub	r8, r6
 5ba:	45 c0       	rjmp	.+138    	; 0x646 <__stack+0x147>
 5bc:	85 37       	cpi	r24, 0x75	; 117
 5be:	31 f4       	brne	.+12     	; 0x5cc <__stack+0xcd>
 5c0:	23 2d       	mov	r18, r3
 5c2:	2f 7e       	andi	r18, 0xEF	; 239
 5c4:	b2 2e       	mov	r11, r18
 5c6:	2a e0       	ldi	r18, 0x0A	; 10
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	25 c0       	rjmp	.+74     	; 0x616 <__stack+0x117>
 5cc:	93 2d       	mov	r25, r3
 5ce:	99 7f       	andi	r25, 0xF9	; 249
 5d0:	b9 2e       	mov	r11, r25
 5d2:	8f 36       	cpi	r24, 0x6F	; 111
 5d4:	c1 f0       	breq	.+48     	; 0x606 <__stack+0x107>
 5d6:	18 f4       	brcc	.+6      	; 0x5de <__stack+0xdf>
 5d8:	88 35       	cpi	r24, 0x58	; 88
 5da:	79 f0       	breq	.+30     	; 0x5fa <__stack+0xfb>
 5dc:	b5 c0       	rjmp	.+362    	; 0x748 <__stack+0x249>
 5de:	80 37       	cpi	r24, 0x70	; 112
 5e0:	19 f0       	breq	.+6      	; 0x5e8 <__stack+0xe9>
 5e2:	88 37       	cpi	r24, 0x78	; 120
 5e4:	21 f0       	breq	.+8      	; 0x5ee <__stack+0xef>
 5e6:	b0 c0       	rjmp	.+352    	; 0x748 <__stack+0x249>
 5e8:	e9 2f       	mov	r30, r25
 5ea:	e0 61       	ori	r30, 0x10	; 16
 5ec:	be 2e       	mov	r11, r30
 5ee:	b4 fe       	sbrs	r11, 4
 5f0:	0d c0       	rjmp	.+26     	; 0x60c <__stack+0x10d>
 5f2:	fb 2d       	mov	r31, r11
 5f4:	f4 60       	ori	r31, 0x04	; 4
 5f6:	bf 2e       	mov	r11, r31
 5f8:	09 c0       	rjmp	.+18     	; 0x60c <__stack+0x10d>
 5fa:	34 fe       	sbrs	r3, 4
 5fc:	0a c0       	rjmp	.+20     	; 0x612 <__stack+0x113>
 5fe:	29 2f       	mov	r18, r25
 600:	26 60       	ori	r18, 0x06	; 6
 602:	b2 2e       	mov	r11, r18
 604:	06 c0       	rjmp	.+12     	; 0x612 <__stack+0x113>
 606:	28 e0       	ldi	r18, 0x08	; 8
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	05 c0       	rjmp	.+10     	; 0x616 <__stack+0x117>
 60c:	20 e1       	ldi	r18, 0x10	; 16
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <__stack+0x117>
 612:	20 e1       	ldi	r18, 0x10	; 16
 614:	32 e0       	ldi	r19, 0x02	; 2
 616:	f8 01       	movw	r30, r16
 618:	b7 fe       	sbrs	r11, 7
 61a:	07 c0       	rjmp	.+14     	; 0x62a <__stack+0x12b>
 61c:	60 81       	ld	r22, Z
 61e:	71 81       	ldd	r23, Z+1	; 0x01
 620:	82 81       	ldd	r24, Z+2	; 0x02
 622:	93 81       	ldd	r25, Z+3	; 0x03
 624:	0c 5f       	subi	r16, 0xFC	; 252
 626:	1f 4f       	sbci	r17, 0xFF	; 255
 628:	06 c0       	rjmp	.+12     	; 0x636 <__stack+0x137>
 62a:	60 81       	ld	r22, Z
 62c:	71 81       	ldd	r23, Z+1	; 0x01
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 5f       	subi	r16, 0xFE	; 254
 634:	1f 4f       	sbci	r17, 0xFF	; 255
 636:	a3 01       	movw	r20, r6
 638:	0e 94 44 05 	call	0xa88	; 0xa88 <__ultoa_invert>
 63c:	88 2e       	mov	r8, r24
 63e:	86 18       	sub	r8, r6
 640:	fb 2d       	mov	r31, r11
 642:	ff 77       	andi	r31, 0x7F	; 127
 644:	3f 2e       	mov	r3, r31
 646:	36 fe       	sbrs	r3, 6
 648:	0d c0       	rjmp	.+26     	; 0x664 <__stack+0x165>
 64a:	23 2d       	mov	r18, r3
 64c:	2e 7f       	andi	r18, 0xFE	; 254
 64e:	a2 2e       	mov	r10, r18
 650:	89 14       	cp	r8, r9
 652:	58 f4       	brcc	.+22     	; 0x66a <__stack+0x16b>
 654:	34 fe       	sbrs	r3, 4
 656:	0b c0       	rjmp	.+22     	; 0x66e <__stack+0x16f>
 658:	32 fc       	sbrc	r3, 2
 65a:	09 c0       	rjmp	.+18     	; 0x66e <__stack+0x16f>
 65c:	83 2d       	mov	r24, r3
 65e:	8e 7e       	andi	r24, 0xEE	; 238
 660:	a8 2e       	mov	r10, r24
 662:	05 c0       	rjmp	.+10     	; 0x66e <__stack+0x16f>
 664:	b8 2c       	mov	r11, r8
 666:	a3 2c       	mov	r10, r3
 668:	03 c0       	rjmp	.+6      	; 0x670 <__stack+0x171>
 66a:	b8 2c       	mov	r11, r8
 66c:	01 c0       	rjmp	.+2      	; 0x670 <__stack+0x171>
 66e:	b9 2c       	mov	r11, r9
 670:	a4 fe       	sbrs	r10, 4
 672:	0f c0       	rjmp	.+30     	; 0x692 <__stack+0x193>
 674:	fe 01       	movw	r30, r28
 676:	e8 0d       	add	r30, r8
 678:	f1 1d       	adc	r31, r1
 67a:	80 81       	ld	r24, Z
 67c:	80 33       	cpi	r24, 0x30	; 48
 67e:	21 f4       	brne	.+8      	; 0x688 <__stack+0x189>
 680:	9a 2d       	mov	r25, r10
 682:	99 7e       	andi	r25, 0xE9	; 233
 684:	a9 2e       	mov	r10, r25
 686:	09 c0       	rjmp	.+18     	; 0x69a <__stack+0x19b>
 688:	a2 fe       	sbrs	r10, 2
 68a:	06 c0       	rjmp	.+12     	; 0x698 <__stack+0x199>
 68c:	b3 94       	inc	r11
 68e:	b3 94       	inc	r11
 690:	04 c0       	rjmp	.+8      	; 0x69a <__stack+0x19b>
 692:	8a 2d       	mov	r24, r10
 694:	86 78       	andi	r24, 0x86	; 134
 696:	09 f0       	breq	.+2      	; 0x69a <__stack+0x19b>
 698:	b3 94       	inc	r11
 69a:	a3 fc       	sbrc	r10, 3
 69c:	11 c0       	rjmp	.+34     	; 0x6c0 <__stack+0x1c1>
 69e:	a0 fe       	sbrs	r10, 0
 6a0:	06 c0       	rjmp	.+12     	; 0x6ae <__stack+0x1af>
 6a2:	b2 14       	cp	r11, r2
 6a4:	88 f4       	brcc	.+34     	; 0x6c8 <__stack+0x1c9>
 6a6:	28 0c       	add	r2, r8
 6a8:	92 2c       	mov	r9, r2
 6aa:	9b 18       	sub	r9, r11
 6ac:	0e c0       	rjmp	.+28     	; 0x6ca <__stack+0x1cb>
 6ae:	b2 14       	cp	r11, r2
 6b0:	60 f4       	brcc	.+24     	; 0x6ca <__stack+0x1cb>
 6b2:	b6 01       	movw	r22, r12
 6b4:	80 e2       	ldi	r24, 0x20	; 32
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 08 05 	call	0xa10	; 0xa10 <fputc>
 6bc:	b3 94       	inc	r11
 6be:	f7 cf       	rjmp	.-18     	; 0x6ae <__stack+0x1af>
 6c0:	b2 14       	cp	r11, r2
 6c2:	18 f4       	brcc	.+6      	; 0x6ca <__stack+0x1cb>
 6c4:	2b 18       	sub	r2, r11
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <__stack+0x1cd>
 6c8:	98 2c       	mov	r9, r8
 6ca:	21 2c       	mov	r2, r1
 6cc:	a4 fe       	sbrs	r10, 4
 6ce:	10 c0       	rjmp	.+32     	; 0x6f0 <__stack+0x1f1>
 6d0:	b6 01       	movw	r22, r12
 6d2:	80 e3       	ldi	r24, 0x30	; 48
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 08 05 	call	0xa10	; 0xa10 <fputc>
 6da:	a2 fe       	sbrs	r10, 2
 6dc:	17 c0       	rjmp	.+46     	; 0x70c <__stack+0x20d>
 6de:	a1 fc       	sbrc	r10, 1
 6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <__stack+0x1e9>
 6e2:	88 e7       	ldi	r24, 0x78	; 120
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <__stack+0x1ed>
 6e8:	88 e5       	ldi	r24, 0x58	; 88
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	b6 01       	movw	r22, r12
 6ee:	0c c0       	rjmp	.+24     	; 0x708 <__stack+0x209>
 6f0:	8a 2d       	mov	r24, r10
 6f2:	86 78       	andi	r24, 0x86	; 134
 6f4:	59 f0       	breq	.+22     	; 0x70c <__stack+0x20d>
 6f6:	a1 fe       	sbrs	r10, 1
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <__stack+0x1ff>
 6fa:	8b e2       	ldi	r24, 0x2B	; 43
 6fc:	01 c0       	rjmp	.+2      	; 0x700 <__stack+0x201>
 6fe:	80 e2       	ldi	r24, 0x20	; 32
 700:	a7 fc       	sbrc	r10, 7
 702:	8d e2       	ldi	r24, 0x2D	; 45
 704:	b6 01       	movw	r22, r12
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 08 05 	call	0xa10	; 0xa10 <fputc>
 70c:	89 14       	cp	r8, r9
 70e:	38 f4       	brcc	.+14     	; 0x71e <__stack+0x21f>
 710:	b6 01       	movw	r22, r12
 712:	80 e3       	ldi	r24, 0x30	; 48
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 08 05 	call	0xa10	; 0xa10 <fputc>
 71a:	9a 94       	dec	r9
 71c:	f7 cf       	rjmp	.-18     	; 0x70c <__stack+0x20d>
 71e:	8a 94       	dec	r8
 720:	f3 01       	movw	r30, r6
 722:	e8 0d       	add	r30, r8
 724:	f1 1d       	adc	r31, r1
 726:	80 81       	ld	r24, Z
 728:	b6 01       	movw	r22, r12
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 08 05 	call	0xa10	; 0xa10 <fputc>
 730:	81 10       	cpse	r8, r1
 732:	f5 cf       	rjmp	.-22     	; 0x71e <__stack+0x21f>
 734:	22 20       	and	r2, r2
 736:	09 f4       	brne	.+2      	; 0x73a <__stack+0x23b>
 738:	42 ce       	rjmp	.-892    	; 0x3be <vfprintf+0x24>
 73a:	b6 01       	movw	r22, r12
 73c:	80 e2       	ldi	r24, 0x20	; 32
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 08 05 	call	0xa10	; 0xa10 <fputc>
 744:	2a 94       	dec	r2
 746:	f6 cf       	rjmp	.-20     	; 0x734 <__stack+0x235>
 748:	f6 01       	movw	r30, r12
 74a:	86 81       	ldd	r24, Z+6	; 0x06
 74c:	97 81       	ldd	r25, Z+7	; 0x07
 74e:	02 c0       	rjmp	.+4      	; 0x754 <__stack+0x255>
 750:	8f ef       	ldi	r24, 0xFF	; 255
 752:	9f ef       	ldi	r25, 0xFF	; 255
 754:	2b 96       	adiw	r28, 0x0b	; 11
 756:	e2 e1       	ldi	r30, 0x12	; 18
 758:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__epilogue_restores__>

0000075c <calloc>:
 75c:	0f 93       	push	r16
 75e:	1f 93       	push	r17
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
 764:	86 9f       	mul	r24, r22
 766:	80 01       	movw	r16, r0
 768:	87 9f       	mul	r24, r23
 76a:	10 0d       	add	r17, r0
 76c:	96 9f       	mul	r25, r22
 76e:	10 0d       	add	r17, r0
 770:	11 24       	eor	r1, r1
 772:	c8 01       	movw	r24, r16
 774:	0e 94 ca 03 	call	0x794	; 0x794 <malloc>
 778:	ec 01       	movw	r28, r24
 77a:	00 97       	sbiw	r24, 0x00	; 0
 77c:	29 f0       	breq	.+10     	; 0x788 <calloc+0x2c>
 77e:	a8 01       	movw	r20, r16
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	0e 94 f6 04 	call	0x9ec	; 0x9ec <memset>
 788:	ce 01       	movw	r24, r28
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	08 95       	ret

00000794 <malloc>:
 794:	0f 93       	push	r16
 796:	1f 93       	push	r17
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	82 30       	cpi	r24, 0x02	; 2
 79e:	91 05       	cpc	r25, r1
 7a0:	10 f4       	brcc	.+4      	; 0x7a6 <malloc+0x12>
 7a2:	82 e0       	ldi	r24, 0x02	; 2
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <__flp>
 7aa:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <__flp+0x1>
 7ae:	20 e0       	ldi	r18, 0x00	; 0
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	a0 e0       	ldi	r26, 0x00	; 0
 7b4:	b0 e0       	ldi	r27, 0x00	; 0
 7b6:	30 97       	sbiw	r30, 0x00	; 0
 7b8:	19 f1       	breq	.+70     	; 0x800 <malloc+0x6c>
 7ba:	40 81       	ld	r20, Z
 7bc:	51 81       	ldd	r21, Z+1	; 0x01
 7be:	02 81       	ldd	r16, Z+2	; 0x02
 7c0:	13 81       	ldd	r17, Z+3	; 0x03
 7c2:	48 17       	cp	r20, r24
 7c4:	59 07       	cpc	r21, r25
 7c6:	c8 f0       	brcs	.+50     	; 0x7fa <malloc+0x66>
 7c8:	84 17       	cp	r24, r20
 7ca:	95 07       	cpc	r25, r21
 7cc:	69 f4       	brne	.+26     	; 0x7e8 <malloc+0x54>
 7ce:	10 97       	sbiw	r26, 0x00	; 0
 7d0:	31 f0       	breq	.+12     	; 0x7de <malloc+0x4a>
 7d2:	12 96       	adiw	r26, 0x02	; 2
 7d4:	0c 93       	st	X, r16
 7d6:	12 97       	sbiw	r26, 0x02	; 2
 7d8:	13 96       	adiw	r26, 0x03	; 3
 7da:	1c 93       	st	X, r17
 7dc:	27 c0       	rjmp	.+78     	; 0x82c <malloc+0x98>
 7de:	00 93 fe 01 	sts	0x01FE, r16	; 0x8001fe <__flp>
 7e2:	10 93 ff 01 	sts	0x01FF, r17	; 0x8001ff <__flp+0x1>
 7e6:	22 c0       	rjmp	.+68     	; 0x82c <malloc+0x98>
 7e8:	21 15       	cp	r18, r1
 7ea:	31 05       	cpc	r19, r1
 7ec:	19 f0       	breq	.+6      	; 0x7f4 <malloc+0x60>
 7ee:	42 17       	cp	r20, r18
 7f0:	53 07       	cpc	r21, r19
 7f2:	18 f4       	brcc	.+6      	; 0x7fa <malloc+0x66>
 7f4:	9a 01       	movw	r18, r20
 7f6:	bd 01       	movw	r22, r26
 7f8:	ef 01       	movw	r28, r30
 7fa:	df 01       	movw	r26, r30
 7fc:	f8 01       	movw	r30, r16
 7fe:	db cf       	rjmp	.-74     	; 0x7b6 <malloc+0x22>
 800:	21 15       	cp	r18, r1
 802:	31 05       	cpc	r19, r1
 804:	f9 f0       	breq	.+62     	; 0x844 <malloc+0xb0>
 806:	28 1b       	sub	r18, r24
 808:	39 0b       	sbc	r19, r25
 80a:	24 30       	cpi	r18, 0x04	; 4
 80c:	31 05       	cpc	r19, r1
 80e:	80 f4       	brcc	.+32     	; 0x830 <malloc+0x9c>
 810:	8a 81       	ldd	r24, Y+2	; 0x02
 812:	9b 81       	ldd	r25, Y+3	; 0x03
 814:	61 15       	cp	r22, r1
 816:	71 05       	cpc	r23, r1
 818:	21 f0       	breq	.+8      	; 0x822 <malloc+0x8e>
 81a:	fb 01       	movw	r30, r22
 81c:	93 83       	std	Z+3, r25	; 0x03
 81e:	82 83       	std	Z+2, r24	; 0x02
 820:	04 c0       	rjmp	.+8      	; 0x82a <malloc+0x96>
 822:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <__flp+0x1>
 826:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <__flp>
 82a:	fe 01       	movw	r30, r28
 82c:	32 96       	adiw	r30, 0x02	; 2
 82e:	44 c0       	rjmp	.+136    	; 0x8b8 <malloc+0x124>
 830:	fe 01       	movw	r30, r28
 832:	e2 0f       	add	r30, r18
 834:	f3 1f       	adc	r31, r19
 836:	81 93       	st	Z+, r24
 838:	91 93       	st	Z+, r25
 83a:	22 50       	subi	r18, 0x02	; 2
 83c:	31 09       	sbc	r19, r1
 83e:	39 83       	std	Y+1, r19	; 0x01
 840:	28 83       	st	Y, r18
 842:	3a c0       	rjmp	.+116    	; 0x8b8 <malloc+0x124>
 844:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <__brkval>
 848:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <__brkval+0x1>
 84c:	23 2b       	or	r18, r19
 84e:	41 f4       	brne	.+16     	; 0x860 <malloc+0xcc>
 850:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
 854:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
 858:	30 93 fd 01 	sts	0x01FD, r19	; 0x8001fd <__brkval+0x1>
 85c:	20 93 fc 01 	sts	0x01FC, r18	; 0x8001fc <__brkval>
 860:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
 864:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
 868:	21 15       	cp	r18, r1
 86a:	31 05       	cpc	r19, r1
 86c:	41 f4       	brne	.+16     	; 0x87e <malloc+0xea>
 86e:	2d b7       	in	r18, 0x3d	; 61
 870:	3e b7       	in	r19, 0x3e	; 62
 872:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
 876:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
 87a:	24 1b       	sub	r18, r20
 87c:	35 0b       	sbc	r19, r21
 87e:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <__brkval>
 882:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <__brkval+0x1>
 886:	e2 17       	cp	r30, r18
 888:	f3 07       	cpc	r31, r19
 88a:	a0 f4       	brcc	.+40     	; 0x8b4 <malloc+0x120>
 88c:	2e 1b       	sub	r18, r30
 88e:	3f 0b       	sbc	r19, r31
 890:	28 17       	cp	r18, r24
 892:	39 07       	cpc	r19, r25
 894:	78 f0       	brcs	.+30     	; 0x8b4 <malloc+0x120>
 896:	ac 01       	movw	r20, r24
 898:	4e 5f       	subi	r20, 0xFE	; 254
 89a:	5f 4f       	sbci	r21, 0xFF	; 255
 89c:	24 17       	cp	r18, r20
 89e:	35 07       	cpc	r19, r21
 8a0:	48 f0       	brcs	.+18     	; 0x8b4 <malloc+0x120>
 8a2:	4e 0f       	add	r20, r30
 8a4:	5f 1f       	adc	r21, r31
 8a6:	50 93 fd 01 	sts	0x01FD, r21	; 0x8001fd <__brkval+0x1>
 8aa:	40 93 fc 01 	sts	0x01FC, r20	; 0x8001fc <__brkval>
 8ae:	81 93       	st	Z+, r24
 8b0:	91 93       	st	Z+, r25
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <malloc+0x124>
 8b4:	e0 e0       	ldi	r30, 0x00	; 0
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	cf 01       	movw	r24, r30
 8ba:	df 91       	pop	r29
 8bc:	cf 91       	pop	r28
 8be:	1f 91       	pop	r17
 8c0:	0f 91       	pop	r16
 8c2:	08 95       	ret

000008c4 <free>:
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	00 97       	sbiw	r24, 0x00	; 0
 8ca:	09 f4       	brne	.+2      	; 0x8ce <free+0xa>
 8cc:	81 c0       	rjmp	.+258    	; 0x9d0 <free+0x10c>
 8ce:	fc 01       	movw	r30, r24
 8d0:	32 97       	sbiw	r30, 0x02	; 2
 8d2:	13 82       	std	Z+3, r1	; 0x03
 8d4:	12 82       	std	Z+2, r1	; 0x02
 8d6:	a0 91 fe 01 	lds	r26, 0x01FE	; 0x8001fe <__flp>
 8da:	b0 91 ff 01 	lds	r27, 0x01FF	; 0x8001ff <__flp+0x1>
 8de:	10 97       	sbiw	r26, 0x00	; 0
 8e0:	81 f4       	brne	.+32     	; 0x902 <free+0x3e>
 8e2:	20 81       	ld	r18, Z
 8e4:	31 81       	ldd	r19, Z+1	; 0x01
 8e6:	82 0f       	add	r24, r18
 8e8:	93 1f       	adc	r25, r19
 8ea:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <__brkval>
 8ee:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <__brkval+0x1>
 8f2:	28 17       	cp	r18, r24
 8f4:	39 07       	cpc	r19, r25
 8f6:	51 f5       	brne	.+84     	; 0x94c <free+0x88>
 8f8:	f0 93 fd 01 	sts	0x01FD, r31	; 0x8001fd <__brkval+0x1>
 8fc:	e0 93 fc 01 	sts	0x01FC, r30	; 0x8001fc <__brkval>
 900:	67 c0       	rjmp	.+206    	; 0x9d0 <free+0x10c>
 902:	ed 01       	movw	r28, r26
 904:	20 e0       	ldi	r18, 0x00	; 0
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	ce 17       	cp	r28, r30
 90a:	df 07       	cpc	r29, r31
 90c:	40 f4       	brcc	.+16     	; 0x91e <free+0x5a>
 90e:	4a 81       	ldd	r20, Y+2	; 0x02
 910:	5b 81       	ldd	r21, Y+3	; 0x03
 912:	9e 01       	movw	r18, r28
 914:	41 15       	cp	r20, r1
 916:	51 05       	cpc	r21, r1
 918:	f1 f0       	breq	.+60     	; 0x956 <free+0x92>
 91a:	ea 01       	movw	r28, r20
 91c:	f5 cf       	rjmp	.-22     	; 0x908 <free+0x44>
 91e:	d3 83       	std	Z+3, r29	; 0x03
 920:	c2 83       	std	Z+2, r28	; 0x02
 922:	40 81       	ld	r20, Z
 924:	51 81       	ldd	r21, Z+1	; 0x01
 926:	84 0f       	add	r24, r20
 928:	95 1f       	adc	r25, r21
 92a:	c8 17       	cp	r28, r24
 92c:	d9 07       	cpc	r29, r25
 92e:	59 f4       	brne	.+22     	; 0x946 <free+0x82>
 930:	88 81       	ld	r24, Y
 932:	99 81       	ldd	r25, Y+1	; 0x01
 934:	84 0f       	add	r24, r20
 936:	95 1f       	adc	r25, r21
 938:	02 96       	adiw	r24, 0x02	; 2
 93a:	91 83       	std	Z+1, r25	; 0x01
 93c:	80 83       	st	Z, r24
 93e:	8a 81       	ldd	r24, Y+2	; 0x02
 940:	9b 81       	ldd	r25, Y+3	; 0x03
 942:	93 83       	std	Z+3, r25	; 0x03
 944:	82 83       	std	Z+2, r24	; 0x02
 946:	21 15       	cp	r18, r1
 948:	31 05       	cpc	r19, r1
 94a:	29 f4       	brne	.+10     	; 0x956 <free+0x92>
 94c:	f0 93 ff 01 	sts	0x01FF, r31	; 0x8001ff <__flp+0x1>
 950:	e0 93 fe 01 	sts	0x01FE, r30	; 0x8001fe <__flp>
 954:	3d c0       	rjmp	.+122    	; 0x9d0 <free+0x10c>
 956:	e9 01       	movw	r28, r18
 958:	fb 83       	std	Y+3, r31	; 0x03
 95a:	ea 83       	std	Y+2, r30	; 0x02
 95c:	49 91       	ld	r20, Y+
 95e:	59 91       	ld	r21, Y+
 960:	c4 0f       	add	r28, r20
 962:	d5 1f       	adc	r29, r21
 964:	ec 17       	cp	r30, r28
 966:	fd 07       	cpc	r31, r29
 968:	61 f4       	brne	.+24     	; 0x982 <free+0xbe>
 96a:	80 81       	ld	r24, Z
 96c:	91 81       	ldd	r25, Z+1	; 0x01
 96e:	84 0f       	add	r24, r20
 970:	95 1f       	adc	r25, r21
 972:	02 96       	adiw	r24, 0x02	; 2
 974:	e9 01       	movw	r28, r18
 976:	99 83       	std	Y+1, r25	; 0x01
 978:	88 83       	st	Y, r24
 97a:	82 81       	ldd	r24, Z+2	; 0x02
 97c:	93 81       	ldd	r25, Z+3	; 0x03
 97e:	9b 83       	std	Y+3, r25	; 0x03
 980:	8a 83       	std	Y+2, r24	; 0x02
 982:	e0 e0       	ldi	r30, 0x00	; 0
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	12 96       	adiw	r26, 0x02	; 2
 988:	8d 91       	ld	r24, X+
 98a:	9c 91       	ld	r25, X
 98c:	13 97       	sbiw	r26, 0x03	; 3
 98e:	00 97       	sbiw	r24, 0x00	; 0
 990:	19 f0       	breq	.+6      	; 0x998 <free+0xd4>
 992:	fd 01       	movw	r30, r26
 994:	dc 01       	movw	r26, r24
 996:	f7 cf       	rjmp	.-18     	; 0x986 <free+0xc2>
 998:	8d 91       	ld	r24, X+
 99a:	9c 91       	ld	r25, X
 99c:	11 97       	sbiw	r26, 0x01	; 1
 99e:	9d 01       	movw	r18, r26
 9a0:	2e 5f       	subi	r18, 0xFE	; 254
 9a2:	3f 4f       	sbci	r19, 0xFF	; 255
 9a4:	82 0f       	add	r24, r18
 9a6:	93 1f       	adc	r25, r19
 9a8:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <__brkval>
 9ac:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <__brkval+0x1>
 9b0:	28 17       	cp	r18, r24
 9b2:	39 07       	cpc	r19, r25
 9b4:	69 f4       	brne	.+26     	; 0x9d0 <free+0x10c>
 9b6:	30 97       	sbiw	r30, 0x00	; 0
 9b8:	29 f4       	brne	.+10     	; 0x9c4 <free+0x100>
 9ba:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <__flp+0x1>
 9be:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <__flp>
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <free+0x104>
 9c4:	13 82       	std	Z+3, r1	; 0x03
 9c6:	12 82       	std	Z+2, r1	; 0x02
 9c8:	b0 93 fd 01 	sts	0x01FD, r27	; 0x8001fd <__brkval+0x1>
 9cc:	a0 93 fc 01 	sts	0x01FC, r26	; 0x8001fc <__brkval>
 9d0:	df 91       	pop	r29
 9d2:	cf 91       	pop	r28
 9d4:	08 95       	ret

000009d6 <strnlen_P>:
 9d6:	fc 01       	movw	r30, r24
 9d8:	05 90       	lpm	r0, Z+
 9da:	61 50       	subi	r22, 0x01	; 1
 9dc:	70 40       	sbci	r23, 0x00	; 0
 9de:	01 10       	cpse	r0, r1
 9e0:	d8 f7       	brcc	.-10     	; 0x9d8 <strnlen_P+0x2>
 9e2:	80 95       	com	r24
 9e4:	90 95       	com	r25
 9e6:	8e 0f       	add	r24, r30
 9e8:	9f 1f       	adc	r25, r31
 9ea:	08 95       	ret

000009ec <memset>:
 9ec:	dc 01       	movw	r26, r24
 9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <memset+0x6>
 9f0:	6d 93       	st	X+, r22
 9f2:	41 50       	subi	r20, 0x01	; 1
 9f4:	50 40       	sbci	r21, 0x00	; 0
 9f6:	e0 f7       	brcc	.-8      	; 0x9f0 <memset+0x4>
 9f8:	08 95       	ret

000009fa <strnlen>:
 9fa:	fc 01       	movw	r30, r24
 9fc:	61 50       	subi	r22, 0x01	; 1
 9fe:	70 40       	sbci	r23, 0x00	; 0
 a00:	01 90       	ld	r0, Z+
 a02:	01 10       	cpse	r0, r1
 a04:	d8 f7       	brcc	.-10     	; 0x9fc <strnlen+0x2>
 a06:	80 95       	com	r24
 a08:	90 95       	com	r25
 a0a:	8e 0f       	add	r24, r30
 a0c:	9f 1f       	adc	r25, r31
 a0e:	08 95       	ret

00000a10 <fputc>:
 a10:	0f 93       	push	r16
 a12:	1f 93       	push	r17
 a14:	cf 93       	push	r28
 a16:	df 93       	push	r29
 a18:	fb 01       	movw	r30, r22
 a1a:	23 81       	ldd	r18, Z+3	; 0x03
 a1c:	21 fd       	sbrc	r18, 1
 a1e:	03 c0       	rjmp	.+6      	; 0xa26 <fputc+0x16>
 a20:	8f ef       	ldi	r24, 0xFF	; 255
 a22:	9f ef       	ldi	r25, 0xFF	; 255
 a24:	2c c0       	rjmp	.+88     	; 0xa7e <fputc+0x6e>
 a26:	22 ff       	sbrs	r18, 2
 a28:	16 c0       	rjmp	.+44     	; 0xa56 <fputc+0x46>
 a2a:	46 81       	ldd	r20, Z+6	; 0x06
 a2c:	57 81       	ldd	r21, Z+7	; 0x07
 a2e:	24 81       	ldd	r18, Z+4	; 0x04
 a30:	35 81       	ldd	r19, Z+5	; 0x05
 a32:	42 17       	cp	r20, r18
 a34:	53 07       	cpc	r21, r19
 a36:	44 f4       	brge	.+16     	; 0xa48 <fputc+0x38>
 a38:	a0 81       	ld	r26, Z
 a3a:	b1 81       	ldd	r27, Z+1	; 0x01
 a3c:	9d 01       	movw	r18, r26
 a3e:	2f 5f       	subi	r18, 0xFF	; 255
 a40:	3f 4f       	sbci	r19, 0xFF	; 255
 a42:	31 83       	std	Z+1, r19	; 0x01
 a44:	20 83       	st	Z, r18
 a46:	8c 93       	st	X, r24
 a48:	26 81       	ldd	r18, Z+6	; 0x06
 a4a:	37 81       	ldd	r19, Z+7	; 0x07
 a4c:	2f 5f       	subi	r18, 0xFF	; 255
 a4e:	3f 4f       	sbci	r19, 0xFF	; 255
 a50:	37 83       	std	Z+7, r19	; 0x07
 a52:	26 83       	std	Z+6, r18	; 0x06
 a54:	14 c0       	rjmp	.+40     	; 0xa7e <fputc+0x6e>
 a56:	8b 01       	movw	r16, r22
 a58:	ec 01       	movw	r28, r24
 a5a:	fb 01       	movw	r30, r22
 a5c:	00 84       	ldd	r0, Z+8	; 0x08
 a5e:	f1 85       	ldd	r31, Z+9	; 0x09
 a60:	e0 2d       	mov	r30, r0
 a62:	09 95       	icall
 a64:	89 2b       	or	r24, r25
 a66:	e1 f6       	brne	.-72     	; 0xa20 <fputc+0x10>
 a68:	d8 01       	movw	r26, r16
 a6a:	16 96       	adiw	r26, 0x06	; 6
 a6c:	8d 91       	ld	r24, X+
 a6e:	9c 91       	ld	r25, X
 a70:	17 97       	sbiw	r26, 0x07	; 7
 a72:	01 96       	adiw	r24, 0x01	; 1
 a74:	17 96       	adiw	r26, 0x07	; 7
 a76:	9c 93       	st	X, r25
 a78:	8e 93       	st	-X, r24
 a7a:	16 97       	sbiw	r26, 0x06	; 6
 a7c:	ce 01       	movw	r24, r28
 a7e:	df 91       	pop	r29
 a80:	cf 91       	pop	r28
 a82:	1f 91       	pop	r17
 a84:	0f 91       	pop	r16
 a86:	08 95       	ret

00000a88 <__ultoa_invert>:
 a88:	fa 01       	movw	r30, r20
 a8a:	aa 27       	eor	r26, r26
 a8c:	28 30       	cpi	r18, 0x08	; 8
 a8e:	51 f1       	breq	.+84     	; 0xae4 <__ultoa_invert+0x5c>
 a90:	20 31       	cpi	r18, 0x10	; 16
 a92:	81 f1       	breq	.+96     	; 0xaf4 <__ultoa_invert+0x6c>
 a94:	e8 94       	clt
 a96:	6f 93       	push	r22
 a98:	6e 7f       	andi	r22, 0xFE	; 254
 a9a:	6e 5f       	subi	r22, 0xFE	; 254
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	af 4f       	sbci	r26, 0xFF	; 255
 aa4:	b1 e0       	ldi	r27, 0x01	; 1
 aa6:	3e d0       	rcall	.+124    	; 0xb24 <__ultoa_invert+0x9c>
 aa8:	b4 e0       	ldi	r27, 0x04	; 4
 aaa:	3c d0       	rcall	.+120    	; 0xb24 <__ultoa_invert+0x9c>
 aac:	67 0f       	add	r22, r23
 aae:	78 1f       	adc	r23, r24
 ab0:	89 1f       	adc	r24, r25
 ab2:	9a 1f       	adc	r25, r26
 ab4:	a1 1d       	adc	r26, r1
 ab6:	68 0f       	add	r22, r24
 ab8:	79 1f       	adc	r23, r25
 aba:	8a 1f       	adc	r24, r26
 abc:	91 1d       	adc	r25, r1
 abe:	a1 1d       	adc	r26, r1
 ac0:	6a 0f       	add	r22, r26
 ac2:	71 1d       	adc	r23, r1
 ac4:	81 1d       	adc	r24, r1
 ac6:	91 1d       	adc	r25, r1
 ac8:	a1 1d       	adc	r26, r1
 aca:	20 d0       	rcall	.+64     	; 0xb0c <__ultoa_invert+0x84>
 acc:	09 f4       	brne	.+2      	; 0xad0 <__ultoa_invert+0x48>
 ace:	68 94       	set
 ad0:	3f 91       	pop	r19
 ad2:	2a e0       	ldi	r18, 0x0A	; 10
 ad4:	26 9f       	mul	r18, r22
 ad6:	11 24       	eor	r1, r1
 ad8:	30 19       	sub	r19, r0
 ada:	30 5d       	subi	r19, 0xD0	; 208
 adc:	31 93       	st	Z+, r19
 ade:	de f6       	brtc	.-74     	; 0xa96 <__ultoa_invert+0xe>
 ae0:	cf 01       	movw	r24, r30
 ae2:	08 95       	ret
 ae4:	46 2f       	mov	r20, r22
 ae6:	47 70       	andi	r20, 0x07	; 7
 ae8:	40 5d       	subi	r20, 0xD0	; 208
 aea:	41 93       	st	Z+, r20
 aec:	b3 e0       	ldi	r27, 0x03	; 3
 aee:	0f d0       	rcall	.+30     	; 0xb0e <__ultoa_invert+0x86>
 af0:	c9 f7       	brne	.-14     	; 0xae4 <__ultoa_invert+0x5c>
 af2:	f6 cf       	rjmp	.-20     	; 0xae0 <__ultoa_invert+0x58>
 af4:	46 2f       	mov	r20, r22
 af6:	4f 70       	andi	r20, 0x0F	; 15
 af8:	40 5d       	subi	r20, 0xD0	; 208
 afa:	4a 33       	cpi	r20, 0x3A	; 58
 afc:	18 f0       	brcs	.+6      	; 0xb04 <__ultoa_invert+0x7c>
 afe:	49 5d       	subi	r20, 0xD9	; 217
 b00:	31 fd       	sbrc	r19, 1
 b02:	40 52       	subi	r20, 0x20	; 32
 b04:	41 93       	st	Z+, r20
 b06:	02 d0       	rcall	.+4      	; 0xb0c <__ultoa_invert+0x84>
 b08:	a9 f7       	brne	.-22     	; 0xaf4 <__ultoa_invert+0x6c>
 b0a:	ea cf       	rjmp	.-44     	; 0xae0 <__ultoa_invert+0x58>
 b0c:	b4 e0       	ldi	r27, 0x04	; 4
 b0e:	a6 95       	lsr	r26
 b10:	97 95       	ror	r25
 b12:	87 95       	ror	r24
 b14:	77 95       	ror	r23
 b16:	67 95       	ror	r22
 b18:	ba 95       	dec	r27
 b1a:	c9 f7       	brne	.-14     	; 0xb0e <__ultoa_invert+0x86>
 b1c:	00 97       	sbiw	r24, 0x00	; 0
 b1e:	61 05       	cpc	r22, r1
 b20:	71 05       	cpc	r23, r1
 b22:	08 95       	ret
 b24:	9b 01       	movw	r18, r22
 b26:	ac 01       	movw	r20, r24
 b28:	0a 2e       	mov	r0, r26
 b2a:	06 94       	lsr	r0
 b2c:	57 95       	ror	r21
 b2e:	47 95       	ror	r20
 b30:	37 95       	ror	r19
 b32:	27 95       	ror	r18
 b34:	ba 95       	dec	r27
 b36:	c9 f7       	brne	.-14     	; 0xb2a <__ultoa_invert+0xa2>
 b38:	62 0f       	add	r22, r18
 b3a:	73 1f       	adc	r23, r19
 b3c:	84 1f       	adc	r24, r20
 b3e:	95 1f       	adc	r25, r21
 b40:	a0 1d       	adc	r26, r0
 b42:	08 95       	ret

00000b44 <__divmodsi4>:
 b44:	05 2e       	mov	r0, r21
 b46:	97 fb       	bst	r25, 7
 b48:	1e f4       	brtc	.+6      	; 0xb50 <__divmodsi4+0xc>
 b4a:	00 94       	com	r0
 b4c:	0e 94 b9 05 	call	0xb72	; 0xb72 <__negsi2>
 b50:	57 fd       	sbrc	r21, 7
 b52:	07 d0       	rcall	.+14     	; 0xb62 <__divmodsi4_neg2>
 b54:	0e 94 0b 06 	call	0xc16	; 0xc16 <__udivmodsi4>
 b58:	07 fc       	sbrc	r0, 7
 b5a:	03 d0       	rcall	.+6      	; 0xb62 <__divmodsi4_neg2>
 b5c:	4e f4       	brtc	.+18     	; 0xb70 <__divmodsi4_exit>
 b5e:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__negsi2>

00000b62 <__divmodsi4_neg2>:
 b62:	50 95       	com	r21
 b64:	40 95       	com	r20
 b66:	30 95       	com	r19
 b68:	21 95       	neg	r18
 b6a:	3f 4f       	sbci	r19, 0xFF	; 255
 b6c:	4f 4f       	sbci	r20, 0xFF	; 255
 b6e:	5f 4f       	sbci	r21, 0xFF	; 255

00000b70 <__divmodsi4_exit>:
 b70:	08 95       	ret

00000b72 <__negsi2>:
 b72:	90 95       	com	r25
 b74:	80 95       	com	r24
 b76:	70 95       	com	r23
 b78:	61 95       	neg	r22
 b7a:	7f 4f       	sbci	r23, 0xFF	; 255
 b7c:	8f 4f       	sbci	r24, 0xFF	; 255
 b7e:	9f 4f       	sbci	r25, 0xFF	; 255
 b80:	08 95       	ret

00000b82 <__muluhisi3>:
 b82:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__umulhisi3>
 b86:	a5 9f       	mul	r26, r21
 b88:	90 0d       	add	r25, r0
 b8a:	b4 9f       	mul	r27, r20
 b8c:	90 0d       	add	r25, r0
 b8e:	a4 9f       	mul	r26, r20
 b90:	80 0d       	add	r24, r0
 b92:	91 1d       	adc	r25, r1
 b94:	11 24       	eor	r1, r1
 b96:	08 95       	ret

00000b98 <__mulshisi3>:
 b98:	b7 ff       	sbrs	r27, 7
 b9a:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__muluhisi3>

00000b9e <__mulohisi3>:
 b9e:	0e 94 c1 05 	call	0xb82	; 0xb82 <__muluhisi3>
 ba2:	82 1b       	sub	r24, r18
 ba4:	93 0b       	sbc	r25, r19
 ba6:	08 95       	ret

00000ba8 <__prologue_saves__>:
 ba8:	2f 92       	push	r2
 baa:	3f 92       	push	r3
 bac:	4f 92       	push	r4
 bae:	5f 92       	push	r5
 bb0:	6f 92       	push	r6
 bb2:	7f 92       	push	r7
 bb4:	8f 92       	push	r8
 bb6:	9f 92       	push	r9
 bb8:	af 92       	push	r10
 bba:	bf 92       	push	r11
 bbc:	cf 92       	push	r12
 bbe:	df 92       	push	r13
 bc0:	ef 92       	push	r14
 bc2:	ff 92       	push	r15
 bc4:	0f 93       	push	r16
 bc6:	1f 93       	push	r17
 bc8:	cf 93       	push	r28
 bca:	df 93       	push	r29
 bcc:	cd b7       	in	r28, 0x3d	; 61
 bce:	de b7       	in	r29, 0x3e	; 62
 bd0:	ca 1b       	sub	r28, r26
 bd2:	db 0b       	sbc	r29, r27
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	f8 94       	cli
 bd8:	de bf       	out	0x3e, r29	; 62
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	cd bf       	out	0x3d, r28	; 61
 bde:	09 94       	ijmp

00000be0 <__epilogue_restores__>:
 be0:	2a 88       	ldd	r2, Y+18	; 0x12
 be2:	39 88       	ldd	r3, Y+17	; 0x11
 be4:	48 88       	ldd	r4, Y+16	; 0x10
 be6:	5f 84       	ldd	r5, Y+15	; 0x0f
 be8:	6e 84       	ldd	r6, Y+14	; 0x0e
 bea:	7d 84       	ldd	r7, Y+13	; 0x0d
 bec:	8c 84       	ldd	r8, Y+12	; 0x0c
 bee:	9b 84       	ldd	r9, Y+11	; 0x0b
 bf0:	aa 84       	ldd	r10, Y+10	; 0x0a
 bf2:	b9 84       	ldd	r11, Y+9	; 0x09
 bf4:	c8 84       	ldd	r12, Y+8	; 0x08
 bf6:	df 80       	ldd	r13, Y+7	; 0x07
 bf8:	ee 80       	ldd	r14, Y+6	; 0x06
 bfa:	fd 80       	ldd	r15, Y+5	; 0x05
 bfc:	0c 81       	ldd	r16, Y+4	; 0x04
 bfe:	1b 81       	ldd	r17, Y+3	; 0x03
 c00:	aa 81       	ldd	r26, Y+2	; 0x02
 c02:	b9 81       	ldd	r27, Y+1	; 0x01
 c04:	ce 0f       	add	r28, r30
 c06:	d1 1d       	adc	r29, r1
 c08:	0f b6       	in	r0, 0x3f	; 63
 c0a:	f8 94       	cli
 c0c:	de bf       	out	0x3e, r29	; 62
 c0e:	0f be       	out	0x3f, r0	; 63
 c10:	cd bf       	out	0x3d, r28	; 61
 c12:	ed 01       	movw	r28, r26
 c14:	08 95       	ret

00000c16 <__udivmodsi4>:
 c16:	a1 e2       	ldi	r26, 0x21	; 33
 c18:	1a 2e       	mov	r1, r26
 c1a:	aa 1b       	sub	r26, r26
 c1c:	bb 1b       	sub	r27, r27
 c1e:	fd 01       	movw	r30, r26
 c20:	0d c0       	rjmp	.+26     	; 0xc3c <__udivmodsi4_ep>

00000c22 <__udivmodsi4_loop>:
 c22:	aa 1f       	adc	r26, r26
 c24:	bb 1f       	adc	r27, r27
 c26:	ee 1f       	adc	r30, r30
 c28:	ff 1f       	adc	r31, r31
 c2a:	a2 17       	cp	r26, r18
 c2c:	b3 07       	cpc	r27, r19
 c2e:	e4 07       	cpc	r30, r20
 c30:	f5 07       	cpc	r31, r21
 c32:	20 f0       	brcs	.+8      	; 0xc3c <__udivmodsi4_ep>
 c34:	a2 1b       	sub	r26, r18
 c36:	b3 0b       	sbc	r27, r19
 c38:	e4 0b       	sbc	r30, r20
 c3a:	f5 0b       	sbc	r31, r21

00000c3c <__udivmodsi4_ep>:
 c3c:	66 1f       	adc	r22, r22
 c3e:	77 1f       	adc	r23, r23
 c40:	88 1f       	adc	r24, r24
 c42:	99 1f       	adc	r25, r25
 c44:	1a 94       	dec	r1
 c46:	69 f7       	brne	.-38     	; 0xc22 <__udivmodsi4_loop>
 c48:	60 95       	com	r22
 c4a:	70 95       	com	r23
 c4c:	80 95       	com	r24
 c4e:	90 95       	com	r25
 c50:	9b 01       	movw	r18, r22
 c52:	ac 01       	movw	r20, r24
 c54:	bd 01       	movw	r22, r26
 c56:	cf 01       	movw	r24, r30
 c58:	08 95       	ret

00000c5a <__umulhisi3>:
 c5a:	a2 9f       	mul	r26, r18
 c5c:	b0 01       	movw	r22, r0
 c5e:	b3 9f       	mul	r27, r19
 c60:	c0 01       	movw	r24, r0
 c62:	a3 9f       	mul	r26, r19
 c64:	70 0d       	add	r23, r0
 c66:	81 1d       	adc	r24, r1
 c68:	11 24       	eor	r1, r1
 c6a:	91 1d       	adc	r25, r1
 c6c:	b2 9f       	mul	r27, r18
 c6e:	70 0d       	add	r23, r0
 c70:	81 1d       	adc	r24, r1
 c72:	11 24       	eor	r1, r1
 c74:	91 1d       	adc	r25, r1
 c76:	08 95       	ret

00000c78 <_exit>:
 c78:	f8 94       	cli

00000c7a <__stop_program>:
 c7a:	ff cf       	rjmp	.-2      	; 0xc7a <__stop_program>
